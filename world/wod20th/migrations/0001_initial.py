# Generated by Django 4.2.13 on 2025-01-28 18:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("objects", "0015_crisis_outcome_task"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ActionTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                ("downtime_cost", models.IntegerField(default=0)),
                ("requires_target", models.BooleanField(default=False)),
                ("category", models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "asset_type",
                    models.CharField(
                        choices=[
                            ("retainer", "Retainer"),
                            ("haven", "Haven"),
                            ("territory", "Territory"),
                            ("contact", "Contact"),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("value", models.IntegerField(default=0)),
                ("owner_id", models.IntegerField()),
                ("status", models.CharField(default="Active", max_length=50)),
                ("traits", models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Stat",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(default="")),
                ("game_line", models.CharField(max_length=100)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("attributes", "Attributes"),
                            ("abilities", "Abilities"),
                            ("secondary_abilities", "Secondary Abilities"),
                            ("advantages", "Advantages"),
                            ("backgrounds", "Backgrounds"),
                            ("powers", "Powers"),
                            ("merits", "Merits"),
                            ("flaws", "Flaws"),
                            ("traits", "Traits"),
                            ("identity", "Identity"),
                            ("archetype", "Archetype"),
                            ("virtues", "Virtues"),
                            ("legacy", "Legacy"),
                            ("pools", "Pools"),
                            ("other", "Other"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "stat_type",
                    models.CharField(
                        choices=[
                            ("attribute", "Attribute"),
                            ("ability", "Ability"),
                            ("secondary_ability", "Secondary Ability"),
                            ("advantage", "Advantage"),
                            ("background", "Background"),
                            ("lineage", "Lineage"),
                            ("discipline", "Discipline"),
                            ("combodiscipline", "Combo Discipline"),
                            ("thaumaturgy", "Thaumaturgy"),
                            ("gift", "Gift"),
                            ("rite", "Rite"),
                            ("sphere", "Sphere"),
                            ("rote", "Rote"),
                            ("art", "Art"),
                            ("splat", "Splat"),
                            ("edge", "Edge"),
                            ("special_advantage", "Special Advantage"),
                            ("discipline", "Discipline"),
                            ("realm", "Realm"),
                            ("sphere", "Sphere"),
                            ("art", "Art"),
                            ("path", "Path"),
                            ("sorcery", "Sorcery"),
                            ("faith", "Faith"),
                            ("numina", "Numina"),
                            ("enlightenment", "Enlightenment"),
                            ("power", "Power"),
                            ("other", "Other"),
                            ("virtue", "Virtue"),
                            ("vice", "Vice"),
                            ("merit", "Merit"),
                            ("flaw", "Flaw"),
                            ("trait", "Trait"),
                            ("skill", "Skill"),
                            ("knowledge", "Knowledge"),
                            ("talent", "Talent"),
                            ("secondary_knowledge", "Secondary Knowledge"),
                            ("secondary_talent", "Secondary Talent"),
                            ("secondary_skill", "Secondary Skill"),
                            ("specialty", "Specialty"),
                            ("other", "Other"),
                            ("physical", "Physical"),
                            ("social", "Social"),
                            ("mental", "Mental"),
                            ("personal", "Personal"),
                            ("supernatural", "Supernatural"),
                            ("moral", "Moral"),
                            ("temporary", "Temporary"),
                            ("dual", "Dual"),
                            ("renown", "Renown"),
                            ("arete", "Arete"),
                            ("banality", "Banality"),
                            ("glamour", "Glamour"),
                            ("essence", "Essence"),
                            ("quintessence", "Quintessence"),
                            ("blood", "Blood"),
                            ("rage", "Rage"),
                            ("gnosis", "Gnosis"),
                            ("willpower", "Willpower"),
                            ("resonance", "Resonance"),
                            ("synergy", "Synergy"),
                            ("paradox", "Paradox"),
                            ("kith", "Kith"),
                            ("phyla", "Phyla"),
                            ("seeming", "Seeming"),
                            ("house", "House"),
                            ("seelie-legacy", "Seelie Legacy"),
                            ("unseelie-legacy", "Unseelie Legacy"),
                            ("court", "Court"),
                            ("tribe", "Tribe"),
                            ("camp", "Camp"),
                            ("breed", "Breed"),
                            ("clan", "Clan"),
                            ("companion_type", "Companion Type"),
                            ("mortalplus_type", "Mortal+ Type"),
                            ("varna", "Varna"),
                        ],
                        max_length=100,
                    ),
                ),
                ("values", models.JSONField(blank=True, default=list, null=True)),
                (
                    "lock_string",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "splat",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("xp_cost", models.IntegerField(blank=True, default=0, null=True)),
                (
                    "prerequisites",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("notes", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "shifter_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("garou", "Garou"),
                            ("gurahl", "Gurahl"),
                            ("rokea", "Rokea"),
                            ("ananasi", "Ananasi"),
                            ("ajaba", "Ajaba"),
                            ("bastet", "Bastet"),
                            ("corax", "Corax"),
                            ("kitsune", "Kitsune"),
                            ("mokole", "Mokole"),
                            ("nagah", "Nagah"),
                            ("nuwisha", "Nuwisha"),
                            ("ratkin", "Ratkin"),
                            ("none", "None"),
                        ],
                        default="none",
                        max_length=100,
                    ),
                ),
                ("hidden", models.BooleanField(default=False)),
                ("locked", models.BooleanField(default=False)),
                ("instanced", models.BooleanField(default=False, null=True)),
                (
                    "default",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "auspice",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ragabash", "Ragabash"),
                            ("theurge", "Theurge"),
                            ("philodox", "Philodox"),
                            ("galliard", "Galliard"),
                            ("ahroun", "Ahroun"),
                            ("brightwater", "Brightwater"),
                            ("dimwater", "Dimwater"),
                            ("darkwater", "Darkwater"),
                            ("arcas", "Arcas"),
                            ("uzmati", "Uzmati"),
                            ("kojubat", "Kojubat"),
                            ("kieh", "Kieh"),
                            ("rishi", "Rishi"),
                            ("rising sun", "Rising Sun"),
                            ("noonday sun", "Noonday Sun"),
                            ("shrouded sun", "Shrouded Sun"),
                            ("midnight sun", "Midnight Sun"),
                            ("decorated sun", "Decorated Sun"),
                            ("solar eclipse", "Solar Eclipse"),
                            ("kamakshi", "Kamakshi"),
                            ("kartikeya", "Kartikeya"),
                            ("kamsa", "Kamsa"),
                            ("kali", "Kali"),
                            ("none", "None"),
                        ],
                        default="none",
                        max_length=100,
                    ),
                ),
                (
                    "breed",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("homid", "Homid"),
                            ("metis", "Metis"),
                            ("lupus", "Lupus"),
                            ("feline", "Feline"),
                            ("squamus", "Squamus"),
                            ("ursa", "Ursa"),
                            ("animal-born", "Animal-Born"),
                            ("none", "None"),
                        ],
                        default="none",
                        max_length=100,
                    ),
                ),
                (
                    "tribe",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of tribes that can learn this gift",
                        null=True,
                    ),
                ),
                (
                    "camp",
                    models.CharField(
                        blank=True,
                        help_text="Specific camp that can learn this gift",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="Source book reference",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "system",
                    models.TextField(
                        blank=True, help_text="Game mechanics description", null=True
                    ),
                ),
                (
                    "mortalplus_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ghoul", "Ghoul"),
                            ("kinfolk", "Kinfolk"),
                            ("kinain", "Kinain"),
                            ("sorcerer", "Sorcerer"),
                            ("psychic", "Psychic"),
                            ("faithful", "Faithful"),
                            ("none", "None"),
                        ],
                        default="none",
                        help_text="Type of Mortal+ character",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "stat_type")},
            },
        ),
        migrations.CreateModel(
            name="ShapeshifterForm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("shifter_type", models.CharField(max_length=50)),
                ("description", models.TextField()),
                ("stat_modifiers", models.JSONField(default=dict)),
                ("rage_cost", models.IntegerField(default=0)),
                ("difficulty", models.IntegerField(default=6)),
                (
                    "lock_string",
                    models.CharField(
                        default="examine:all();control:perm(Admin)", max_length=255
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "shifter_type")},
            },
        ),
        migrations.CreateModel(
            name="CharacterSheet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "account",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_sheet",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "character",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_sheet",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "db_object",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="db_character_sheet",
                        to="objects.objectdb",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CharacterImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="character_images/")),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                ("is_primary", models.BooleanField(default=False)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="objects.objectdb",
                    ),
                ),
            ],
            options={
                "ordering": ["-is_primary", "-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="Action",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("character_id", models.IntegerField()),
                ("downtime_spent", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("result", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "target_asset",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="targeted_by_actions",
                        to="wod20th.asset",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wod20th.actiontemplate",
                    ),
                ),
            ],
        ),
    ]
