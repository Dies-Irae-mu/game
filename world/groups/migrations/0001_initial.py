<<<<<<< HEAD
# Generated by Django 4.2.13 on 2025-05-12 04:35
=======
# Generated by Django 4.2.13 on 2025-05-21 17:07
>>>>>>> 625be5d8841cab6feb3e0fd52134e219972f2a63

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
<<<<<<< HEAD
        ("typeclasses", "0016_alter_attribute_id_alter_tag_id"),
        ("wod20th", "0001_initial"),
=======
        ("wod20th", "0001_initial"),
        ("typeclasses", "0016_alter_attribute_id_alter_tag_id"),
>>>>>>> 625be5d8841cab6feb3e0fd52134e219972f2a63
        ("objects", "0014_defaultobject_crisis_defaultcharacter_defaultexit_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True)),
                ("ic_description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("website", models.URLField(blank=True)),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="If True, group will be visible in the public group list",
                    ),
                ),
                (
                    "group_id",
                    models.PositiveIntegerField(
                        help_text="Sequential ID number for the group",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Private notes visible only to staff and group members",
                    ),
                ),
                (
                    "leader",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="led_groups",
                        to="wod20th.charactersheet",
                    ),
                ),
                (
                    "roster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="linked_groups",
                        to="wod20th.roster",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GroupRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("can_invite", models.BooleanField(default=False)),
                ("can_kick", models.BooleanField(default=False)),
                ("can_promote", models.BooleanField(default=False)),
                ("can_edit_info", models.BooleanField(default=False)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles",
                        to="groups.group",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CharacterGroupInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "db_key",
                    models.CharField(db_index=True, max_length=255, verbose_name="key"),
                ),
                (
                    "db_typeclass_path",
                    models.CharField(
                        db_index=True,
                        help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.",
                        max_length=255,
                        null=True,
                        verbose_name="typeclass",
                    ),
                ),
                (
                    "db_date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="creation date"
                    ),
                ),
                (
                    "db_lock_storage",
                    models.TextField(
                        blank=True,
                        help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.",
                        verbose_name="locks",
                    ),
                ),
                (
                    "db_group_description",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Character's personal group information",
                    ),
                ),
                (
                    "db_faction_description",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Character's faction information",
                    ),
                ),
                (
                    "db_attributes",
                    models.ManyToManyField(
                        help_text="attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).",
                        to="typeclasses.attribute",
                    ),
                ),
                (
                    "db_character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_info",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "db_tags",
                    models.ManyToManyField(
                        help_text="tags on this object. Tags are simple string markers to identify, group and alias objects.",
                        to="typeclasses.tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Character Group Info",
                "verbose_name_plural": "Character Group Data",
            },
        ),
        migrations.CreateModel(
            name="GroupMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Character's title in the group",
                        max_length=100,
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_memberships",
                        to="wod20th.charactersheet",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="groups.group"
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="groups.grouprole",
                    ),
                ),
            ],
            options={
                "unique_together": {("character", "group")},
            },
        ),
        migrations.CreateModel(
            name="GroupJoinRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="join_requests",
                        to="wod20th.charactersheet",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="join_requests",
                        to="groups.group",
                    ),
                ),
            ],
            options={
                "unique_together": {("character", "group")},
            },
        ),
    ]
