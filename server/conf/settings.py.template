"""
Evennia settings file.

The available options are found in the default settings file found
here:

https://www.evennia.com/docs/latest/Setup/Settings-Default.html

Remember:

Don't copy more from the default file than you actually intend to
change; this will make sure that you don't overload upstream updates
unnecessarily.

When changing a setting requiring a file system path (like
path/to/actual/file.py), use GAME_DIR and EVENNIA_DIR to reference
your game folder and the Evennia library folders respectively. Python
paths (path.to.module) should be given relative to the game's root
folder (typeclasses.foo) whereas paths within the Evennia library
needs to be given explicitly (evennia.foo).

If you want to share your game dir, including its settings, you can
put secret game- or server-specific settings in secret_settings.py.

"""

# Use the defaults from Evennia unless explicitly overridden
from evennia.settings_default import *
import os
from evennia.contrib.base_systems import color_markups
from world.wod20th.locks import LOCK_FUNCS as WOD_LOCK_FUNCS
import warnings

warnings.filterwarnings('ignore', category=RuntimeWarning, module='django.db.models.base') # Required for Django 4.x logging.

# Configure logging
import logging.handlers

# Ensure log directory exists
LOG_DIR = os.path.join(GAME_DIR, "server", "logs")
os.makedirs(LOG_DIR, exist_ok=True)

# Server log file with rotation
SERVER_LOG_FILE = os.path.join(LOG_DIR, "server.log")
SERVER_LOG_DAY_ROTATION = 7
SERVER_LOG_MAX_SIZE = 1000000

# Portal log file with rotation
PORTAL_LOG_FILE = os.path.join(LOG_DIR, "portal.log")
PORTAL_LOG_DAY_ROTATION = 7
PORTAL_LOG_MAX_SIZE = 1000000

# HTTP log file
HTTP_LOG_FILE = os.path.join(LOG_DIR, "http_requests.log")

# Lock warning log file
LOCKWARNING_LOG_FILE = os.path.join(LOG_DIR, "lockwarnings.log")

# Channel log settings
CHANNEL_LOG_NUM_TAIL_LINES = 20
CHANNEL_LOG_ROTATE_SIZE = 1000000

# Custom logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s'
        }
    },
    'handlers': {
        'server_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': SERVER_LOG_FILE,
            'maxBytes': SERVER_LOG_MAX_SIZE,
            'backupCount': SERVER_LOG_DAY_ROTATION,
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },
        'portal_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': PORTAL_LOG_FILE,
            'maxBytes': PORTAL_LOG_MAX_SIZE,
            'backupCount': PORTAL_LOG_DAY_ROTATION,
            'formatter': 'verbose',
            'encoding': 'utf-8'
        }
    },
    'loggers': {
        'evennia': {
            'handlers': ['server_file'],
            'level': 'INFO',
            'propagate': False
        },
        'twisted': {
            'handlers': ['portal_file'],
            'level': 'INFO',
            'propagate': False
        }
    },
    'root': {
        'handlers': ['server_file'],
        'level': 'WARNING'
    }
}

SITE_ID = 1  # This tells Django which site object to use
DEBUG = True
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
######################################################################
# Evennia base server config
######################################################################
SERVERNAME = "Dies Irae"
DEBUG = True
SITE_ID = 1
DEFAULT_CMDSETS = [
    'commands.mycmdset.MyCmdset'
]

# Server configuration
TELNET_INTERFACES = ['0.0.0.0']
WEBSERVER_INTERFACES = ['0.0.0.0']
WEBSOCKET_CLIENT_INTERFACE = '0.0.0.0'

# Port configuration
TELNET_PORTS = [4201]
WEBSERVER_PORTS = [(4200, 4005)]
WEBSOCKET_CLIENT_PORT = 4202

# Protocol configuration
WEBSOCKET_ENABLED = True
WEBCLIENT_ENABLED = True

# SSL Configuration - Disabled for local development
USE_SSL = False
SSL_ENABLED = False
WEBSOCKET_CLIENT_SSL = False

# Websocket specific settings
WEBSOCKET_CLIENT_URL = "ws://localhost:4202/websocket"  # Development setting
WEBSOCKET_CLIENT_INTERFACE = '0.0.0.0'
WEBSOCKET_CLIENT_PORT = 4202

# Web client settings
WEBCLIENT_MAX_MESSAGE_LENGTH = 100000
WEBCLIENT_RECONNECT_DELAY = 2000
WEBCLIENT_KEEPALIVE = True

# Security settings - Simplified for development
ALLOWED_HOSTS = ['localhost', '127.0.0.1']
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:4005',
    'http://localhost:4000',
    'http://localhost:4202',
    'ws://localhost:4202'
]

# Use SQLite3 for local development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(GAME_DIR, 'evennia.db3'),
    }
}

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
EVENNIA_ADMIN = False

BASE_ROOM_TYPECLASS = "typeclasses.rooms.RoomParent"
BASE_EXIT_TYPECLASS = "typeclasses.exits.Exit"
BASE_CHANNEL_TYPECLASS = "typeclasses.channels.Channel"

# Lock configuration from settings_dev.py
LOCK_FUNC_MODULES = [
    "evennia.locks.lockfuncs",
    "world.wod20th.locks"
]

LOCK_FUNCS = {
    # Basic type checks
    "has_splat": WOD_LOCK_FUNCS["has_splat"],
    "has_type": WOD_LOCK_FUNCS["has_type"],
    "subscribed": WOD_LOCK_FUNCS["subscribed"],
    "tenant": WOD_LOCK_FUNCS["tenant"],
    "has_wyrm_taint": WOD_LOCK_FUNCS["has_wyrm_taint"],

    # Primary abilities
    "has_talent": WOD_LOCK_FUNCS["has_talent"],
    "has_skill": WOD_LOCK_FUNCS["has_skill"],
    "has_knowledge": WOD_LOCK_FUNCS["has_knowledge"],
    
    # Secondary abilities
    "has_secondary_talent": WOD_LOCK_FUNCS["has_secondary_talent"],
    "has_secondary_skill": WOD_LOCK_FUNCS["has_secondary_skill"],
    "has_secondary_knowledge": WOD_LOCK_FUNCS["has_secondary_knowledge"],
    
    # Advantages
    "has_merit": WOD_LOCK_FUNCS["has_merit"],
    
    # Vampire
    "has_clan": WOD_LOCK_FUNCS["has_clan"],

    # Garou/some shifters
    "has_tribe": WOD_LOCK_FUNCS["has_tribe"],
    "has_auspice": WOD_LOCK_FUNCS["has_auspice"],

    # Mage stuff
    "has_tradition": WOD_LOCK_FUNCS["has_tradition"],
    "has_affiliation": WOD_LOCK_FUNCS["has_affiliation"],
    "has_convention": WOD_LOCK_FUNCS["has_convention"],
    "has_nephandi_faction": WOD_LOCK_FUNCS["has_nephandi_faction"],
    
    # Changeling specifics
    "has_court": WOD_LOCK_FUNCS["has_court"],
    "has_kith": WOD_LOCK_FUNCS["has_kith"],
}

MAX_NR_CHARACTERS = 1
DEFAULT_CHANNELS = []

COLOR_ANSI_EXTRA_MAP = color_markups.MUX_COLOR_ANSI_EXTRA_MAP
COLOR_XTERM256_EXTRA_FG = color_markups.MUX_COLOR_XTERM256_EXTRA_FG
COLOR_XTERM256_EXTRA_BG = color_markups.MUX_COLOR_XTERM256_EXTRA_BG
COLOR_XTERM256_EXTRA_GFG = color_markups.MUX_COLOR_XTERM256_EXTRA_GFG
COLOR_XTERM256_EXTRA_GBG = color_markups.MUX_COLOR_XTERM256_EXTRA_GBG
COLOR_ANSI_XTERM256_BRIGHT_BG_EXTRA_MAP = color_markups.MUX_COLOR_ANSI_XTERM256_BRIGHT_BG_EXTRA_MAP

INSTALLED_APPS += (
    "world.wod20th",
    "wiki",
    "world.jobs",
    "web.character",
    "world.plots",
    "world.hangouts",
    "world.groups",
    "world.equipment",
)

# Static files configuration
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(GAME_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(GAME_DIR, "web", "static"),
    os.path.join(GAME_DIR, "wiki", "static"),
]

# Media configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(GAME_DIR, 'media')

# Global scripts configuration
GLOBAL_SCRIPTS = {
    "weekly_xp_award": {
        "typeclass": "world.wod20th.scripts.weekly_xp.WeeklyXPScript",
        "desc": "Awards weekly XP to active characters",
        "interval": 7 * 24 * 60 * 60,  # 1 week in seconds
        "persistent": True,
        "start_delay": True
    },
    "xp_monitor": {
        "typeclass": "world.wod20th.scripts.weekly_xp.XPMonitor",
        "desc": "Monitors XP changes",
        "interval": 60,  # Check every minute
        "persistent": True
    }
}

# Server start configuration
AT_SERVER_STARTSTOP_MODULE = "world.wod20th.scripts"

def at_server_start():
    """
    This is called every time the server starts up.
    """
    # Import your scripts here to avoid circular imports
    from world.wod20th.scripts import start_all_scripts
    start_all_scripts()

AT_SERVER_START_HOOK = "server.conf.settings.at_server_start"

# Session settings
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_AGE = 3600 * 24 * 7  # 7 days

# Session security - Simplified for development
SESSION_COOKIE_SECURE = False  # Allow cookies over HTTP for development
CSRF_COOKIE_SECURE = False    # Allow CSRF token over HTTP for development
SECURE_SSL_REDIRECT = False   # Don't redirect HTTP to HTTPS in development

######################################################################
# Secure Shell Command Settings
######################################################################

# Command rate limiting - prevent command spam
MAX_COMMAND_RATE = 20  # Maximum commands per second (default is 80)
COMMAND_RATE_WARNING = "You are sending commands too quickly. Please slow down."

# Character limit for commands
MAX_CHAR_LIMIT = 6000  # Maximum characters in a single command
MAX_CHAR_LIMIT_WARNING = "Your command is too long. Please break it into smaller parts."

# In-game error display - useful for development, disable in production
IN_GAME_ERRORS = True

# Broadcast server restart messages
BROADCAST_SERVER_RESTART_MESSAGES = True

# Custom launcher commands - add your own shell commands here
EXTRA_LAUNCHER_COMMANDS = {
    # Example: 'mycommand': 'path.to.callable'
}

# Command default settings
COMMAND_DEFAULT_CLASS = "evennia.commands.default.muxcommand.MuxCommand"
COMMAND_DEFAULT_ARG_REGEX = r"^[ /]|\n|$"
COMMAND_DEFAULT_MSG_ALL_SESSIONS = False
COMMAND_DEFAULT_LOCKS = "cmd:all()"  # Default lock for all commands

# Command set paths
CMDSET_PATHS = ["commands", "evennia", "evennia.contrib"]

# Command set fallbacks
CMDSET_FALLBACKS = {
    CMDSET_CHARACTER: "evennia.commands.default.cmdset_character.CharacterCmdSet",
    CMDSET_ACCOUNT: "evennia.commands.default.cmdset_account.AccountCmdSet",
    CMDSET_SESSION: "evennia.commands.default.cmdset_session.SessionCmdSet",
    CMDSET_UNLOGGEDIN: "evennia.commands.default.cmdset_unloggedin.UnloggedinCmdSet",
}
